generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL")
//   directUrl = env("POSTGRES_URL_NON_POOLING")
// }

model User {
  id                        String                 @id @default(cuid())
  password                  String?
  email                     String?                @unique
  emailVerified             DateTime?
  image                     String?
  isTwoFactorEnabled        Boolean                @default(false)
  name                      String?
  role                      RoleAccess             @default(USER)
  stripe_current_period_end DateTime?
  stripe_customer_id        String?                @unique
  stripe_price_id           String?
  stripe_subscription_id    String?                @unique
  accounts                  Account[]
  twoFactorConfirmation     TwoFactorConfirmation?

  stories  Story[]
  comments Comment[]
  claps    Clap[]
  saves    Save[]
  topics   Topics?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  token   String   @unique
  expires DateTime
  email   String
  id      String   @id @default(cuid())

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum RoleAccess {
  ADMIN
  USER
}

model Story {
  id       String    @id @default(dbgenerated("concat('story_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  authorId String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content  String?
  topics   String[]
  publish  Boolean   @default(false)
  Clap     Clap[]
  Comments Comment[]
  Save     Save[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id              String    @id @default(dbgenerated("concat('comment_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  content         String
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  storyId         String
  story           Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  parentCommentId String?
  parentComment   Comment?  @relation("Comment to Comment", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies         Comment[] @relation("Comment to Comment")
  Clap            Clap[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clap {
  id        String   @id @default(dbgenerated("concat('clap_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  commentId String?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  clapCount Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Save {
  id      String @id @default(dbgenerated("concat('save_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  storyId String
  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Following {
  id          String   @id @default(dbgenerated("concat('following_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Topics {
  id             String   @id @default(dbgenerated("concat('following_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  selectedTopics String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
